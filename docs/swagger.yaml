definitions:
  dto.BindRoleApi:
    properties:
      apiIds:
        items:
          type: integer
        type: array
      roleId:
        type: integer
    required:
    - apiIds
    - roleId
    type: object
  dto.BindRoleMenu:
    properties:
      menuIds:
        items:
          type: integer
        type: array
      roleId:
        type: integer
    required:
    - menuIds
    - roleId
    type: object
  dto.BindUserRole:
    properties:
      roleIds:
        items:
          type: integer
        type: array
      userId:
        type: integer
    required:
    - roleIds
    - userId
    type: object
  dto.CreateApi:
    properties:
      apiGroup:
        type: string
      description:
        type: string
      method:
        type: string
      path:
        type: string
    type: object
  dto.CreateMenu:
    properties:
      component:
        type: string
      defaultMenu:
        type: boolean
      hidden:
        type: boolean
      icon:
        type: string
      keepAlive:
        type: boolean
      name:
        type: string
      parentId:
        type: integer
      path:
        type: string
      sort:
        type: integer
      title:
        type: string
    type: object
  dto.CreateRole:
    properties:
      key:
        type: string
      name:
        type: string
    required:
    - key
    - name
    type: object
  dto.CreateUser:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.DeleteApi:
    properties:
      ids:
        items:
          type: integer
        type: array
    type: object
  dto.DeleteMenu:
    properties:
      ids:
        items:
          type: integer
        type: array
    type: object
  dto.DeleteRole:
    properties:
      ids:
        items:
          type: integer
        type: array
    type: object
  dto.DeleteUser:
    properties:
      ids:
        items:
          type: integer
        type: array
    type: object
  dto.DetailApi:
    properties:
      id:
        type: integer
    type: object
  dto.DetailMenu:
    properties:
      id:
        type: integer
    type: object
  dto.DetailRole:
    properties:
      id:
        type: integer
    type: object
  dto.DetailUser:
    properties:
      id:
        type: integer
    type: object
  dto.Login:
    properties:
      captcha:
        type: string
      captchaId:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - captcha
    - captchaId
    - password
    - username
    type: object
  dto.SearchApi:
    properties:
      apiGroup:
        type: string
      description:
        type: string
      method:
        type: string
      page:
        type: integer
      path:
        type: string
      size:
        type: integer
    type: object
  dto.SearchRole:
    properties:
      key:
        type: string
      name:
        type: string
      page:
        type: integer
      size:
        type: integer
    required:
    - key
    - name
    type: object
  dto.SearchUser:
    properties:
      page:
        type: integer
      password:
        type: string
      size:
        type: integer
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.UpdateApi:
    properties:
      apiGroup:
        type: string
      description:
        type: string
      id:
        type: integer
      method:
        type: string
      path:
        type: string
    type: object
  dto.UpdateRole:
    properties:
      id:
        type: integer
      key:
        type: string
      name:
        type: string
    required:
    - key
    - name
    type: object
  dto.UpdateUser:
    properties:
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
info:
  contact: {}
paths:
  /api/all:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取所有的Api 不分页
      tags:
      - Api
  /api/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: api路径, api中文描述, api组, 方法
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.CreateApi'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建api
      tags:
      - Api
  /api/delete:
    post:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteRole'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除Role
      tags:
      - Role
  /api/detail:
    post:
      consumes:
      - application/json
      parameters:
      - description: 根据id获取api
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.DetailApi'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 根据id获取api
      tags:
      - Api
  /api/list:
    post:
      consumes:
      - application/json
      parameters:
      - description: 分页获取Role列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.SearchRole'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取Role列表
      tags:
      - Role
  /api/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: api路径, api中文描述, api组, 方法
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateApi'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"修改成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新api
      tags:
      - Api
  /base/captcha:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"验证码获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 生成验证码
      tags:
      - Base
  /base/login:
    post:
      parameters:
      - description: 用户名, 密码, 验证码
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"登陆成功"}'
          schema:
            type: string
      summary: 用户登录
      tags:
      - Base
  /menu/all:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取所有的菜单 不分页
      tags:
      - Menu
  /menu/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: 菜单名
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMenu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建菜单
      tags:
      - Menu
  /menu/delete:
    post:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteMenu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除菜单
      tags:
      - Menu
  /menu/detail:
    post:
      consumes:
      - application/json
      parameters:
      - description: id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.DetailMenu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 根据id获取菜单信息
      tags:
      - Menu
  /menu/tree:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取菜单列表
      tags:
      - Menu
  /menu/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: 菜单名
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateApi'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"修改成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新菜单
      tags:
      - Menu
  /role/all:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取所有的Role 不分页
      tags:
      - Role
  /role/bindApi:
    post:
      consumes:
      - application/json
      parameters:
      - description: 角色id, apiId
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.BindRoleApi'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 给角色绑定接口权限
      tags:
      - Role
  /role/bindMenu:
    post:
      consumes:
      - application/json
      parameters:
      - description: 角色id, 菜单id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.BindRoleMenu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 给角色绑定菜单权限
      tags:
      - Role
  /role/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: 角色名，角色key
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRole'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建角色
      tags:
      - Role
  /role/detail:
    post:
      consumes:
      - application/json
      parameters:
      - description: 根据id获取Role
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.DetailRole'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 根据id获取Role
      tags:
      - Role
  /role/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: 角色名，角色key
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRole'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新角色
      tags:
      - Role
  /user/all:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取所有的User 不分页
      tags:
      - User
  /user/bindRole:
    post:
      consumes:
      - application/json
      parameters:
      - description: 用户id, 角色id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.BindUserRole'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"绑定成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 给用户绑定角色权限
      tags:
      - User
  /user/create:
    post:
      parameters:
      - description: 用户名, 昵称, 密码, 角色ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"注册成功"}'
          schema:
            type: string
      summary: 创建用户
      tags:
      - User
  /user/delete:
    post:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteUser'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除User
      tags:
      - User
  /user/detail:
    post:
      consumes:
      - application/json
      parameters:
      - description: 根据id获取User
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.DetailUser'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 根据id获取User
      tags:
      - User
  /user/list:
    post:
      consumes:
      - application/json
      parameters:
      - description: 分页获取User列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.SearchUser'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取User列表
      tags:
      - User
  /user/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: 用户名
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新User
      tags:
      - User
swagger: "2.0"
